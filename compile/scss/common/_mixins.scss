@mixin group {
    min-height: 1px;

    &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
    }
}

@mixin round($amount) {
  border-radius: $amount;
  -moz-border-radius: $amount;
  -webkit-border-radius: $amount;
}

@mixin dim($width, $height: $width) {
  height: $height;
  width: $width;
}

@mixin transition($transition-property, $transition-time: 0.1s, $method: ease-in-out) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rotate($deg) {
  -webkit-transform:rotate($deg);
}

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent)); // Safari 5.1-6, Chrome 10+
  background-image:  linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
   background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
}

@mixin ghost-center-y {
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
    margin-right: -0.25em;
  }
}

@mixin sp-css {
	background-repeat: no-repeat;
	overflow: hidden;
	line-height: 0;
	font-size: 0;
	text-indent: 100%;
	border: 0;
}

@mixin sp-center($sprite, $image, $dir: '') {
	position: absolute;
	@if ($dir == x) {
		left: 50%;
		margin-left: -#{sp-width($sprite, $image)/2};
	} @else if ($dir == y) {
		top: 50%;
		margin-top: -#{sp-height($sprite, $image)/2};
	} @else {
		top: 50%;
		left: 50%;
		margin-top: -#{sp-height($sprite, $image)/2};
		margin-left: -#{sp-width($sprite, $image)/2};
	}
}

// http://compass-style.org/reference/compass/helpers/sprites/
@mixin get-sprite($map, $sprite, $css: true, $repeat: no-repeat, $height: true, $width: true) {
	$sprite-layout: smart;

	//http://compass-style.org/reference/compass/helpers/sprites/#sprite-file
	$sprite-image: sprite-file($map, $sprite);

	// http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
	$sprite-map: sprite-url($map);

	// http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
	$sprite-position: sprite-position($map, $sprite);

	background: $sprite-map $sprite-position $repeat;

	// http://compass-style.org/reference/compass/helpers/image-dimensions/
	@if ($height == true) {
		$sprite-height: image-height($sprite-image);
		height: $sprite-height;
	}

	// http://compass-style.org/reference/compass/helpers/image-dimensions/
	@if ($width == true) {
		$sprite-width: image-width($sprite-image);
		width: $sprite-width;
	}

	@if ($css == true) {
		@include sp-css;
	}
}

@mixin sp($family, $sprite, $css: true) {
  @include get-sprite(sprite-map('sp-#{$family}/*.png'), $sprite, $css);

  background-size: sp-width($family, $sprite)/2 sp-height($family, $sprite)/2;

  @media only screen and (-webkit-min-device-pixel-ratio: 2),
only screen and (min-device-pixel-ratio: 2) {
    background-size: sp-width($family, $sprite) sp-height($family, $sprite);
  }
}

@function sp-height($family, $name) {
	@return image-height(sprite-file(sprite-map("sp-#{$family}/*.png"), $name));
}

@function sp-width($family, $name) {
	@return image-width(sprite-file(sprite-map("sp-#{$family}/*.png"), $name));
}
